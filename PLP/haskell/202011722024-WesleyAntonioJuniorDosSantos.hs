-- Lista 1 - exercicio 1
-- Exercícios:
-- 1) Teste as listas em Haskell no interpretador WinHugs e anote os resultados:
[1,2,3]
--[1,2,3]
[0,2,'a']
--ERROR - Cannot interfer instance
-- ** instance:num char
-- ** expression:[0,2,'a']
[1,2,3] == [2,1,3]
-- false
[1 .. 60]
-- [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60]
[1,4 .. 60]
-- [1,4,7,10,13,16,19,22,25,28,31,34,37,40,43,46,49,52,55,58]
[0.1,0.2 .. 0.9]
-- [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9]
[0.1 .. 9]
-- [0.1,1.1,2.1,3.1,4.1,5.1,6.1,7.1,8.1,9.1]
["apartamento",['c','a','s','a']]
-- ["apartamento","casa"]
[('a',3),('b',4),('c',5)]
-- [('a',3),('b',4),('c',5)]
['a','b',['c','d']] /= ['a','b','c','d']
-- ERROR - Type error in list
-- *** Expression     : ['a','b',['c','d']]
-- *** Term           : ['c','d']
-- *** Type           : [Char]
-- *** Does not match : Char
sum [1..10]
--55

-- Lista 2 - exercicio 1

--1) Defina as seguintes listas por compreensão:
-- a) [0,3,6,9,12,15]
[x*3 | x <- [0..5]]
-- b) Os múltiplos de 2 e 3 entre 0 e 20.
[x | x<- [0..20],x 'mod'2 ==0, x'mod' 3 == 0]
-- c) [[1],[2],[3],[4],[5]]
[[x] | x <- [1..5]]
-- d) [[1], [1,1], [1,1,1], [1,1,1,1], [1,1,1,1,1]]
[[1| _ <- [1..n]] | n <- [1..5]]
-- e) [(1,3),(1,2),(1,1),(2,3),(2,2),(2,1),(3,3),(3,2),(3,1)]
[(x,y)| x <- [1..3], y <-[3,2,1]]

-- Lista 3 - exercicio 1

--1. Mostre o resultado obtido pela execução das expressões Haskell (ex. da Lista 3):
> (\x -> x + 3) 5
-- 8
> (\x -> \y -> x * y + 5) 3 4
--17
> map (\x -> x ^3) [2,4,6]
--[8,64,216]
> deriv (\x -> x*x*x) 0.0001 1 where deriv f dx = \x -> (f(x + dx) - f(x)) / dx
-- 3.00030000999874
> (\(x,y) -> x * y^2) (3,4)
--48
> (\(x,y,_) -> x * y^2) (3,4,2)
--48
> map (\(x,y,z) -> x + y + z) [(3,4,2),(1,1,2),(0,0,4)]
--[9,4,4]
> filter (\(x,y) -> x `mod` y == 0) [(4,2),(3,5),(6,3)]
--[(4,2),(6,3)]
> (\xs -> zip xs [1,2,3]) [4,5,6]
--[(4,1),(5,2),(6,3)]
> map (\xs -> zip xs [1..]) [[4,6],[5,7]]
--[[(4,1),(6,2)],[(5,1),(7,2)]]
> foldr1 (+) [1,2,3]
--6
> foldr1 (\x -> \y -> x + y + 7) [1,2,3,4,5]
-- 43